Este código é uma implementação de um problema clássico de sincronização de threads, conhecido como "problema dos leitores e escritores". O objetivo é garantir que múltiplos leitores possam acessar um recurso compartilhado de forma simultânea, mas a escrita só pode ser feita por um escritor por vez, garantindo a consistência dos dados.

O programa começa incluindo as bibliotecas necessárias e definindo algumas constantes, como o número máximo de leitores e escritores. Em seguida, são declarados dois semáforos: "mutex" e "rw_mutex". O primeiro será usado para garantir a exclusão mútua entre leitores, ou seja, que apenas um leitor altere o contador de leitores por vez. Já o segundo semáforo será usado para bloquear a escrita enquanto houver leitores ou escritores acessando o recurso compartilhado.

A seguir, são definidas as funções que serão executadas pelas threads dos leitores e escritores. A função "reader" é responsável por simular a leitura do recurso compartilhado. Ela começa adquirindo o semáforo "mutex" para atualizar o contador de leitores de forma exclusiva. Se este for o primeiro leitor a acessar o recurso, ele adquire o semáforo "rw_mutex", bloqueando a escrita. Depois disso, ele libera o semáforo "mutex" para que outros leitores possam atualizar o contador. Em seguida, a função realiza a leitura do recurso compartilhado, imprime uma mensagem na tela e aguarda um tempo aleatório para simular o tempo de leitura. Depois disso, ele adquire o semáforo "mutex" novamente para atualizar o contador de leitores e liberar o semáforo "rw_mutex" se este for o último leitor a acessar o recurso. Por fim, a função aguarda um tempo aleatório para simular o tempo que o leitor fica sem acessar o recurso.

Já a função "writer" é responsável por simular a escrita no recurso compartilhado. Ela começa adquirindo o semáforo "rw_mutex", bloqueando a escrita enquanto houver leitores ou outros escritores acessando o recurso. Depois disso, a função realiza a escrita no recurso compartilhado, imprime uma mensagem na tela e aguarda um tempo aleatório para simular o tempo de escrita. Por fim, a função libera o semáforo "rw_mutex" e aguarda um tempo aleatório para simular o tempo que o escritor fica sem acessar o recurso.

Na função principal, são inicializados os semáforos, criadas as threads dos leitores e escritores, aguardado o término das threads e, por fim, destruídos os semáforos. Note que cada thread de leitor ou escritor recebe um identificador único através do array "reader_ids" ou "writer_ids", que é passado como argumento para a função correspondente.

Em resumo, este programa implementa uma solução para o problema dos leitores e escritores usando semáforos para garantir a sincronização e exclusão mútua entre as threads.
